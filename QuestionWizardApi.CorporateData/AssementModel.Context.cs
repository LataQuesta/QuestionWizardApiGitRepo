//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuestionWizardApi.CorporateData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AssementEntity : DbContext
    {
        public AssementEntity()
            : base("name=AssementEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<mstAge> mstAges { get; set; }
        public virtual DbSet<mstCompany> mstCompanies { get; set; }
        public virtual DbSet<mstCompetency> mstCompetencies { get; set; }
        public virtual DbSet<MstCompetencyCluster> MstCompetencyClusters { get; set; }
        public virtual DbSet<MstConfig> MstConfigs { get; set; }
        public virtual DbSet<mstCountry> mstCountries { get; set; }
        public virtual DbSet<mstEmployeeStatu> mstEmployeeStatus { get; set; }
        public virtual DbSet<mstExamSet> mstExamSets { get; set; }
        public virtual DbSet<mstGender> mstGenders { get; set; }
        public virtual DbSet<mstIndustry> mstIndustries { get; set; }
        public virtual DbSet<mstMailConfig> mstMailConfigs { get; set; }
        public virtual DbSet<mstMailType> mstMailTypes { get; set; }
        public virtual DbSet<mstMaritalStatu> mstMaritalStatus { get; set; }
        public virtual DbSet<mstModule> mstModules { get; set; }
        public virtual DbSet<mstPair> mstPairs { get; set; }
        public virtual DbSet<mstProfession> mstProfessions { get; set; }
        public virtual DbSet<mstProfileSelected> mstProfileSelecteds { get; set; }
        public virtual DbSet<mstQualification> mstQualifications { get; set; }
        public virtual DbSet<mstQuestion> mstQuestions { get; set; }
        public virtual DbSet<mstQuestionReponseType> mstQuestionReponseTypes { get; set; }
        public virtual DbSet<mstQuestionResponse> mstQuestionResponses { get; set; }
        public virtual DbSet<mstQuestionSubType> mstQuestionSubTypes { get; set; }
        public virtual DbSet<mstQuestionType> mstQuestionTypes { get; set; }
        public virtual DbSet<mstScoreModule> mstScoreModules { get; set; }
        public virtual DbSet<mstState> mstStates { get; set; }
        public virtual DbSet<mstSubModule> mstSubModules { get; set; }
        public virtual DbSet<txnAttachmentMailSent> txnAttachmentMailSents { get; set; }
        public virtual DbSet<txnCandidate> txnCandidates { get; set; }
        public virtual DbSet<txnCompanyVSet> txnCompanyVSets { get; set; }
        public virtual DbSet<txnCompetencyByCompany> txnCompetencyByCompanies { get; set; }
        public virtual DbSet<txnDynamicMisTyping> txnDynamicMisTypings { get; set; }
        public virtual DbSet<txnExamSetStatu> txnExamSetStatus { get; set; }
        public virtual DbSet<txnIndustry> txnIndustries { get; set; }
        public virtual DbSet<txnModule7ScoreCard> txnModule7ScoreCard { get; set; }
        public virtual DbSet<txnQuesResponseWithSubModule> txnQuesResponseWithSubModules { get; set; }
        public virtual DbSet<txnQuestion> txnQuestions { get; set; }
        public virtual DbSet<txnQuestionResponse> txnQuestionResponses { get; set; }
        public virtual DbSet<txnUserTestDetail> txnUserTestDetails { get; set; }
    
        public virtual ObjectResult<SP_GetMasterData_Result> SP_GetMasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMasterData_Result>("SP_GetMasterData");
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_InsertRandomQuestion(Nullable<int> userId, Nullable<int> sETId, Nullable<int> testId, Nullable<int> tYPEID, Nullable<int> companyId, Nullable<int> moduleId, string hostName, ObjectParameter testUniqId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var tYPEIDParameter = tYPEID.HasValue ?
                new ObjectParameter("TYPEID", tYPEID) :
                new ObjectParameter("TYPEID", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_InsertRandomQuestion", userIdParameter, sETIdParameter, testIdParameter, tYPEIDParameter, companyIdParameter, moduleIdParameter, hostNameParameter, testUniqId);
        }
    
        public virtual int SP_Module7ScoreCard(Nullable<int> testId, Nullable<int> sETId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Module7ScoreCard", testIdParameter, sETIdParameter);
        }
    
        public virtual ObjectResult<usp_GetRowScoreTypeWise_Result> usp_GetRowScoreTypeWise(Nullable<int> testId, Nullable<int> sETId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRowScoreTypeWise_Result>("usp_GetRowScoreTypeWise", testIdParameter, sETIdParameter);
        }
    
        public virtual ObjectResult<usp_GetScoreCardName_Result> usp_GetScoreCardName(Nullable<int> testId, Nullable<int> setId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetScoreCardName_Result>("usp_GetScoreCardName", testIdParameter, setIdParameter);
        }
    
        public virtual ObjectResult<usp_SubTypeWiseScoreBoard_Result> usp_SubTypeWiseScoreBoard(Nullable<int> testId, Nullable<int> sETID, Nullable<int> typeId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIDParameter = sETID.HasValue ?
                new ObjectParameter("SETID", sETID) :
                new ObjectParameter("SETID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubTypeWiseScoreBoard_Result>("usp_SubTypeWiseScoreBoard", testIdParameter, sETIDParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<usp_TypeWiseScoreBoard_Result> usp_TypeWiseScoreBoard(Nullable<int> testId, Nullable<int> sETId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TypeWiseScoreBoard_Result>("usp_TypeWiseScoreBoard", testIdParameter, sETIdParameter);
        }
    }
}
