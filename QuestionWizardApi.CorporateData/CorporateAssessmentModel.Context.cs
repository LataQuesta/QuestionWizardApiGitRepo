//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuestionWizardApi.CorporateData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CorporateAssessmentEntities : DbContext
    {
        public CorporateAssessmentEntities()
            : base("name=CorporateAssessmentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<mstAge> mstAges { get; set; }
        public virtual DbSet<mstAssessmentSet> mstAssessmentSets { get; set; }
        public virtual DbSet<mstCompetency> mstCompetencies { get; set; }
        public virtual DbSet<MstConfig> MstConfigs { get; set; }
        public virtual DbSet<mstCountry> mstCountries { get; set; }
        public virtual DbSet<mstEmployeeStatu> mstEmployeeStatus { get; set; }
        public virtual DbSet<mstGender> mstGenders { get; set; }
        public virtual DbSet<mstIndustry> mstIndustries { get; set; }
        public virtual DbSet<mstMailTemplate> mstMailTemplates { get; set; }
        public virtual DbSet<mstMaritalStatu> mstMaritalStatus { get; set; }
        public virtual DbSet<mstProfession> mstProfessions { get; set; }
        public virtual DbSet<mstProfileSelected> mstProfileSelecteds { get; set; }
        public virtual DbSet<mstQualification> mstQualifications { get; set; }
        public virtual DbSet<mstQuestion> mstQuestions { get; set; }
        public virtual DbSet<mstQuestionReponseType> mstQuestionReponseTypes { get; set; }
        public virtual DbSet<mstQuestionResponse> mstQuestionResponses { get; set; }
        public virtual DbSet<mstQuestionSubType> mstQuestionSubTypes { get; set; }
        public virtual DbSet<mstQuestionType> mstQuestionTypes { get; set; }
        public virtual DbSet<mstState> mstStates { get; set; }
        public virtual DbSet<txnCompetencyByCompany> txnCompetencyByCompanies { get; set; }
        public virtual DbSet<txnDynamicMisTyping> txnDynamicMisTypings { get; set; }
        public virtual DbSet<txnExamSetStatu> txnExamSetStatus { get; set; }
        public virtual DbSet<txnIndustry> txnIndustries { get; set; }
        public virtual DbSet<txnModuleByAssessment> txnModuleByAssessments { get; set; }
        public virtual DbSet<txnQuestion> txnQuestions { get; set; }
        public virtual DbSet<txnQuestionResponse> txnQuestionResponses { get; set; }
        public virtual DbSet<txnUserTestDetail> txnUserTestDetails { get; set; }
        public virtual DbSet<mstAssessmentModule> mstAssessmentModules { get; set; }
        public virtual DbSet<mstMainTypeCalScore> mstMainTypeCalScores { get; set; }
        public virtual DbSet<mstExperence> mstExperences { get; set; }
        public virtual DbSet<MstReportRepository> MstReportRepositories { get; set; }
        public virtual DbSet<mstCluster> mstClusters { get; set; }
        public virtual DbSet<Mst_QMP_Normatives> Mst_QMP_Normatives { get; set; }
        public virtual DbSet<txnClusterMapToCompetency> txnClusterMapToCompetencies { get; set; }
        public virtual DbSet<DummyCandidateRecord> DummyCandidateRecords { get; set; }
        public virtual DbSet<mst_mailConfigByAssessment> mst_mailConfigByAssessment { get; set; }
        public virtual DbSet<mstmailConfigByAssessment> mstmailConfigByAssessments { get; set; }
        public virtual DbSet<mstUserLogin> mstUserLogins { get; set; }
        public virtual DbSet<txnCampanyMapToAssessment> txnCampanyMapToAssessments { get; set; }
        public virtual DbSet<txnCandidateLinkHistory> txnCandidateLinkHistories { get; set; }
        public virtual DbSet<TxnConfigureMailSent> TxnConfigureMailSents { get; set; }
        public virtual DbSet<txnHrMapToCompanyAndAssessment> txnHrMapToCompanyAndAssessments { get; set; }
        public virtual DbSet<TxnLinkGenerationId> TxnLinkGenerationIds { get; set; }
        public virtual DbSet<txnMailSentToCandidate> txnMailSentToCandidates { get; set; }
        public virtual DbSet<mstCompany> mstCompanies { get; set; }
        public virtual DbSet<mstHumanResourceRepo> mstHumanResourceRepoes { get; set; }
        public virtual DbSet<txnCandidate> txnCandidates { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Sp_InsertRandomQuestion(Nullable<int> userId, Nullable<int> sETId, Nullable<int> testId, Nullable<int> tYPEID, Nullable<int> assessmentId, string hostName, ObjectParameter testUniqId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var tYPEIDParameter = tYPEID.HasValue ?
                new ObjectParameter("TYPEID", tYPEID) :
                new ObjectParameter("TYPEID", typeof(int));
    
            var assessmentIdParameter = assessmentId.HasValue ?
                new ObjectParameter("AssessmentId", assessmentId) :
                new ObjectParameter("AssessmentId", typeof(int));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_InsertRandomQuestion", userIdParameter, sETIdParameter, testIdParameter, tYPEIDParameter, assessmentIdParameter, hostNameParameter, testUniqId);
        }
    
        public virtual ObjectResult<usp_GetRowScoreTypeWise_Result2> usp_GetRowScoreTypeWise(Nullable<int> testId, Nullable<int> sETId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRowScoreTypeWise_Result2>("usp_GetRowScoreTypeWise", testIdParameter, sETIdParameter);
        }
    
        public virtual ObjectResult<usp_GetScoreCardName_Result2> usp_GetScoreCardName(Nullable<int> testId, Nullable<int> setId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var setIdParameter = setId.HasValue ?
                new ObjectParameter("SetId", setId) :
                new ObjectParameter("SetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetScoreCardName_Result2>("usp_GetScoreCardName", testIdParameter, setIdParameter);
        }
    
        public virtual ObjectResult<usp_SubTypeWiseScoreBoard_Result2> usp_SubTypeWiseScoreBoard(Nullable<int> testId, Nullable<int> sETID, Nullable<int> typeId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIDParameter = sETID.HasValue ?
                new ObjectParameter("SETID", sETID) :
                new ObjectParameter("SETID", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SubTypeWiseScoreBoard_Result2>("usp_SubTypeWiseScoreBoard", testIdParameter, sETIDParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<usp_TypeWiseScoreBoard_Result2> usp_TypeWiseScoreBoard(Nullable<int> testId, Nullable<int> sETId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var sETIdParameter = sETId.HasValue ?
                new ObjectParameter("SETId", sETId) :
                new ObjectParameter("SETId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TypeWiseScoreBoard_Result2>("usp_TypeWiseScoreBoard", testIdParameter, sETIdParameter);
        }
    
        public virtual ObjectResult<SP_GetMasterData_Result3> SP_GetMasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMasterData_Result3>("SP_GetMasterData");
        }
    
        public virtual ObjectResult<Sp_ExportRearrangeOrderScoreCard_Result> Sp_ExportRearrangeOrderScoreCard(Nullable<int> testId, Nullable<int> moduleId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExportRearrangeOrderScoreCard_Result>("Sp_ExportRearrangeOrderScoreCard", testIdParameter, moduleIdParameter);
        }
    
        public virtual ObjectResult<Sp_ExportSubTypeWiseScoreCard_Result> Sp_ExportSubTypeWiseScoreCard(Nullable<int> testId, Nullable<int> moduleId, Nullable<int> typeId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExportSubTypeWiseScoreCard_Result>("Sp_ExportSubTypeWiseScoreCard", testIdParameter, moduleIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<Sp_ExportTypeWiseScoreCard_Result2> Sp_ExportTypeWiseScoreCard(Nullable<int> testId, Nullable<int> moduleId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExportTypeWiseScoreCard_Result2>("Sp_ExportTypeWiseScoreCard", testIdParameter, moduleIdParameter);
        }
    
        public virtual int Sp_Cal_QmapPairWiseConsistency(Nullable<int> testId, Nullable<int> moduleId, Nullable<int> typeId, ObjectParameter consistencyNote, ObjectParameter consistencyTemperature)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Cal_QmapPairWiseConsistency", testIdParameter, moduleIdParameter, typeIdParameter, consistencyNote, consistencyTemperature);
        }
    
        public virtual int Sp_Cal_QLeapPairWiseConsistency(Nullable<int> testId, Nullable<int> moduleId, Nullable<int> typeId, ObjectParameter consistencyNote, ObjectParameter consistencyTemperature)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Cal_QLeapPairWiseConsistency", testIdParameter, moduleIdParameter, typeIdParameter, consistencyNote, consistencyTemperature);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_generatelinkbaseonrequiredetails(Nullable<int> assessmentId, Nullable<int> companyId, Nullable<int> hrId, Nullable<int> initialMailId, Nullable<int> finalMailId, Nullable<bool> isReportSendToHr, Nullable<bool> isReportSendToCandidate, ObjectParameter outputTestId)
        {
            var assessmentIdParameter = assessmentId.HasValue ?
                new ObjectParameter("AssessmentId", assessmentId) :
                new ObjectParameter("AssessmentId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var hrIdParameter = hrId.HasValue ?
                new ObjectParameter("HrId", hrId) :
                new ObjectParameter("HrId", typeof(int));
    
            var initialMailIdParameter = initialMailId.HasValue ?
                new ObjectParameter("InitialMailId", initialMailId) :
                new ObjectParameter("InitialMailId", typeof(int));
    
            var finalMailIdParameter = finalMailId.HasValue ?
                new ObjectParameter("FinalMailId", finalMailId) :
                new ObjectParameter("FinalMailId", typeof(int));
    
            var isReportSendToHrParameter = isReportSendToHr.HasValue ?
                new ObjectParameter("IsReportSendToHr", isReportSendToHr) :
                new ObjectParameter("IsReportSendToHr", typeof(bool));
    
            var isReportSendToCandidateParameter = isReportSendToCandidate.HasValue ?
                new ObjectParameter("IsReportSendToCandidate", isReportSendToCandidate) :
                new ObjectParameter("IsReportSendToCandidate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_generatelinkbaseonrequiredetails", assessmentIdParameter, companyIdParameter, hrIdParameter, initialMailIdParameter, finalMailIdParameter, isReportSendToHrParameter, isReportSendToCandidateParameter, outputTestId);
        }
    
        public virtual ObjectResult<sp_getmailbodyforcandidate_Result> sp_getmailbodyforcandidate(Nullable<int> testId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getmailbodyforcandidate_Result>("sp_getmailbodyforcandidate", testIdParameter);
        }
    
        public virtual ObjectResult<sp_getmailbodyforHr_Result> sp_getmailbodyforHr(Nullable<int> testId)
        {
            var testIdParameter = testId.HasValue ?
                new ObjectParameter("TestId", testId) :
                new ObjectParameter("TestId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getmailbodyforHr_Result>("sp_getmailbodyforHr", testIdParameter);
        }
    }
}
